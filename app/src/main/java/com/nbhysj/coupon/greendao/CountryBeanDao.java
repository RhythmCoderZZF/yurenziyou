package com.nbhysj.coupon.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nbhysj.coupon.model.response.CountryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNTRY_BEAN".
*/
public class CountryBeanDao extends AbstractDao<CountryBean, Long> {

    public static final String TABLENAME = "COUNTRY_BEAN";

    /**
     * Properties of entity CountryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TripId = new Property(1, int.class, "tripId", false, "tripId");
        public final static Property CountyId = new Property(2, String.class, "countyId", false, "COUNTY_ID");
        public final static Property County = new Property(3, String.class, "county", false, "COUNTY");
        public final static Property Banner = new Property(4, String.class, "banner", false, "BANNER");
        public final static Property IsLocationCity = new Property(5, boolean.class, "isLocationCity", false, "IS_LOCATION_CITY");
    }


    public CountryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CountryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNTRY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"tripId\" INTEGER NOT NULL ," + // 1: tripId
                "\"COUNTY_ID\" TEXT," + // 2: countyId
                "\"COUNTY\" TEXT," + // 3: county
                "\"BANNER\" TEXT," + // 4: banner
                "\"IS_LOCATION_CITY\" INTEGER NOT NULL );"); // 5: isLocationCity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNTRY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CountryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTripId());
 
        String countyId = entity.getCountyId();
        if (countyId != null) {
            stmt.bindString(3, countyId);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(4, county);
        }
 
        String banner = entity.getBanner();
        if (banner != null) {
            stmt.bindString(5, banner);
        }
        stmt.bindLong(6, entity.getIsLocationCity() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CountryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTripId());
 
        String countyId = entity.getCountyId();
        if (countyId != null) {
            stmt.bindString(3, countyId);
        }
 
        String county = entity.getCounty();
        if (county != null) {
            stmt.bindString(4, county);
        }
 
        String banner = entity.getBanner();
        if (banner != null) {
            stmt.bindString(5, banner);
        }
        stmt.bindLong(6, entity.getIsLocationCity() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CountryBean readEntity(Cursor cursor, int offset) {
        CountryBean entity = new CountryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // tripId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // countyId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // county
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // banner
            cursor.getShort(offset + 5) != 0 // isLocationCity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CountryBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTripId(cursor.getInt(offset + 1));
        entity.setCountyId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCounty(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBanner(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsLocationCity(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CountryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CountryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CountryBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
